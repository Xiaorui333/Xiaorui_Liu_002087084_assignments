/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Public;
import com.example.jooq.tables.records.SearchResultsRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SearchResults extends TableImpl<SearchResultsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.search_results</code>
     */
    public static final SearchResults SEARCH_RESULTS = new SearchResults();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SearchResultsRecord> getRecordType() {
        return SearchResultsRecord.class;
    }

    /**
     * The column <code>public.search_results.id</code>.
     */
    public final TableField<SearchResultsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.search_results.topic</code>.
     */
    public final TableField<SearchResultsRecord, String> TOPIC = createField(DSL.name("topic"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.search_results.result</code>.
     */
    public final TableField<SearchResultsRecord, String> RESULT = createField(DSL.name("result"), SQLDataType.CLOB.nullable(false), this, "");

    private SearchResults(Name alias, Table<SearchResultsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SearchResults(Name alias, Table<SearchResultsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.search_results</code> table reference
     */
    public SearchResults(String alias) {
        this(DSL.name(alias), SEARCH_RESULTS);
    }

    /**
     * Create an aliased <code>public.search_results</code> table reference
     */
    public SearchResults(Name alias) {
        this(alias, SEARCH_RESULTS);
    }

    /**
     * Create a <code>public.search_results</code> table reference
     */
    public SearchResults() {
        this(DSL.name("search_results"), null);
    }

    public <O extends Record> SearchResults(Table<O> child, ForeignKey<O, SearchResultsRecord> key) {
        super(child, key, SEARCH_RESULTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SearchResultsRecord, Integer> getIdentity() {
        return (Identity<SearchResultsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SearchResultsRecord> getPrimaryKey() {
        return Keys.SEARCH_RESULTS_PKEY;
    }

    @Override
    public SearchResults as(String alias) {
        return new SearchResults(DSL.name(alias), this);
    }

    @Override
    public SearchResults as(Name alias) {
        return new SearchResults(alias, this);
    }

    @Override
    public SearchResults as(Table<?> alias) {
        return new SearchResults(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SearchResults rename(String name) {
        return new SearchResults(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SearchResults rename(Name name) {
        return new SearchResults(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SearchResults rename(Table<?> name) {
        return new SearchResults(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
